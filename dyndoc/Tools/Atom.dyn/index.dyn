{#def]atomInit[#>]
{$,ScrollView,EditorView} = require "atom"
fs = require 'fs-plus'
DyndocViewer = require fs.absolute "~/.atom/packages/dyndoc-viewer/lib/dyndoc-viewer"

class MiniEditorView extends EditorView
  constructor: (options={}) ->
    options.mini = true
    super(options)

  setFontSize: (fontSize) ->
    fontSize = parseInt(fontSize) or 0
    fontSize = Math.min(32, fontSize)
    fontSize = Math.max(10, fontSize)
    super(fontSize)
[#def}

{#def]atomClass[#,]class[][#,]extends[]
[#,]view[][#,]init[][#,]body[][#<]view -> contents, init -> initialize, body -> rest of methods (often empty)
[#rb<]code,tab="","  "
code << "class " + #{=class}.strip
code << " extends " + #{=extends}.strip unless #{=extends}.strip.empty?
code << "\n"
if #{+?view}
	code << tab << "@content: ->"
	content = #{=view}.split("\n",-1).map{|l| #
		l2=l.gsub(/@miniEditor\(([^\)]*)\)\s*\"(.*)\"\s*$/,'@subview "\1",new MiniEditorView(placeholderText: "\2")')
		l2.gsub!(/@dyndoc\(([^\)]*)\)/,'@subview "\1",new DyndocViewer(editorId: "\1") ')
		tab*2 + l2.gsub(/(\@[a-zA-Z0-9\-_\.]*)(\()([^\)]*)(\))/,'\1 outlet: "\3",')
	}
	code << content.join("\n") << "\n"
end
if #{+?init}
	code << tab << "initialize: ->\n"
	code << #{=init}.split("\n",-1).map{|l| tab*2+l}.join("\n") << "\n"
end
if #{+?body}
	code << #{=body}.split("\n",-1).map{|l| tab+l}.join("\n") << "\n"
end
code << tab << "getTitle: ->\n" << tab*2 << '"' << #{=class}.strip << '"' << "\n"
code << tab << "getIconName: ->\n" << tab*2 << '"' << #{=class}.strip << '"' << "\n"
code << tab << "getUri: ->\n" << tab*2 << '"dyndoc-atom://' << #{=class}.strip << '"' << "\n"
[#rb>]code
[#def}

{#def]atomNew[#,]id[][#,]of[][#,]side[right]
[#rb<]code,tab="","  "
code << #{=id} << " = new " << #{=of} << "\n" 
code << "atom.workspaceView.getActivePaneView().splitRight(" << #{=id} << ")\n"
[#rb>]code
[#def}