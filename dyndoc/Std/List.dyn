## each and keys methods for List class (see dyndoc-ruby-demo/BaseLang/List.dyn)


{#hide]
Does not work! To debug! 
{#meth]keys.List[#rb>]@vars.extract("self.content").keys[#}
[#hide}

{#meth]listkeys.List[#rb>]@vars.extract("self.content").keys[#}

{#meth]each.List[#,]fct[]
[#?]#{0?fct}[#rb>]
@vars.extract_raw(".content").each do |k,v| #
  {#>][#=].key[:{k}][#=].value[:{v[:val]}][#yield]default[#>}
end
[#?]else[#rb>]
@vars.extract_raw(".content").each do |k,v| #
  {#>][#=].key[:{k}][#=].value[:{v[:val]}][#>]{#call]#{fct}[#,]#{.key}[#,]#{.value}[#call}[#>}
end
[#meth}

## The code below is just here for old compatibility but would be remove or update soon

{#def]List[#,]list[#rb<]@vars.local[:prev][#{=list}]={}[#}

{#meth]apply.List[#,]_key_[key][#,]_elt_[val]
[#rb>]_key_[#{=_key_}.strip]
[#rb>]_elt_[#{=_elt_}.strip]
[#rb<]
@nb={} unless @nb
@keysList={} unless @keysList
@nb[#{=_elt_}]=#{#.content}
@keysList[#{=_elt_}]=@vars.extract("self.content").keys.sort
@ind={} unless @ind
@ind[#{=_elt_}]=-1
[#>]
[{#loop][#rb<][@ind[#{=_elt_}]+=1]
[#=]#{_key_}[:{@keysList[#{=_elt_}][@ind[#{=_elt_}]]}]
[#=]#{_elt_}[:self.content.#{#{_key_}}]
[#yield]default
[#break]:{@ind[#{=_elt_}]==@nb[#{=_elt_}]-1}
[#}]
[#rb<]@ind[#{=_elt_}]=-1
@nb.delete(#{=_elt_})
@keysList.delete(#{=_elt_})
[#}
